-----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 27.03.2020 22:30:49
-- Design Name: 
-- Module Name: Progetto_reti_logiche - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
use IEEE.NUMERIC_STD.ALL;

entity Progetto_reti_logiche is
    Port ( 
        i_clk     : in std_logic;
        i_start   : in std_logic;
        i_rst     : in std_logic;
        i_data    : in std_logic_vector(7 downto 0);
        o_address : out std_logic_vector(15 downto 0);
        o_done    : out std_logic;
        o_en      : out std_logic;
        o_we      : out std_logic;
        o_data    : out std_logic_vector(7 downto 0)
    );
end Progetto_reti_logiche;

architecture Behavioral of Progetto_reti_logiche is
    type state_type is (RESET, START, WAIT_RAM, SAVE_ADDR, GET_WZ, SAVE_WZ, CHECK, WRITE, ENCODE, DONE);
    
    signal next_state, curr_state: state_type;
    signal counter : std_logic_vector(2 downto 0) := "000"; 
    signal no_wz : std_logic := '0'; 
begin 
    
    state_reg: process(i_clk, i_rst)
    begin
        if i_rst = '1' then 
            curr_state <= RESET;
        elsif rising_edge(i_clk) then 
            curr_state <= next_state;
       end if;
   end process;
   
   WZ_analysis: process(curr_state, i_start, i_data) 
   variable target, curr_Wz : std_logic_vector(7 downto 0) := "00000000"; 
   variable last_Wz : std_logic_vector(2 downto 0);
   variable targetAcquired, no_Wz : std_logic := '0';
   variable check_Wz : signed(7 downto 0);
   begin 
        case curr_state is
            when RESET => 
                o_en <= '0';
                o_we <= '0';
                o_address <= "0000000000000000";
                o_done <= '0';
                o_en <= '0';
                o_we <= '0';
                o_data <= "00000000";
                if i_start = '1' then 
                    next_state <= START;
                else   
                    next_state <= RESET;
                end if;
            
            when START =>
                o_address <= x"0008";
                o_en <= '1';
                o_we <= '0';
                next_state <= WAIT_RAM;
                
            when WAIT_RAM => 
                if targetAcquired = '0' then 
                    targetAcquired := '1';
                    next_state <= SAVE_ADDR;
                else 
                    next_state <= SAVE_WZ;
                end if;
                    
            when SAVE_ADDR =>
                target := i_data;
                o_en <= '0';
                next_state <= GET_WZ;
                
            when GET_WZ =>
                case counter is
                    when "000" => 
                        o_address <= x"0000";
                        counter <= "001";
                    when "001" => 
                        o_address <= x"0001";
                        counter <= "010";
                    
                    when "010" => 
                        o_address <= x"0002";
                        counter <= "011";
                    
                    when "011" => 
                        o_address <= x"0003";
                        counter <= "100";
                    
                    when "100" => 
                        o_address <= x"0004";
                        counter <= "101";
                        
                    when "101" => 
                        o_address <= x"0005";
                        counter <= "110";
                    
                    when "110" => 
                        o_address <= x"0006";
                        counter <= "111";
                    
                    when "111" => 
                        o_address <= x"0007";
                        counter <= "000";
                        no_Wz := '1';
                end case;
                o_en <= '1';
                o_we <= '0';  -- In caso da togliere 
                next_state <= WAIT_RAM;      
                
            when SAVE_WZ =>
                curr_Wz := i_data;
                o_en <= '0';  
                next_state <= CHECK;  
                   
            when CHECK =>
                check_Wz := SIGNED(target) - SIGNED(curr_Wz);
                case check_Wz is
                    when "00000000" => next_state <= ENCODE;
                    when "00000001" => next_state <= ENCODE;
                    when "00000010" => next_state <= ENCODE;
                    when "00000011" => next_state <= ENCODE;
                    when others => 
                        if no_Wz = '1' then
                            next_state <= WRITE;  
                        else
                            next_state <= GET_WZ; 
                        end if;
                    end case; 
            
            when ENCODE =>
                last_Wz := std_logic_vector(unsigned(counter) - "001");
                case check_Wz is
                    when "00000000" => target := '1' & last_Wz & "0001";
                    when "00000001" => target := '1' & last_Wz & "0010";
                    when "00000010" => target := '1' & last_Wz & "0100";
                    when others     => target := '1' & last_Wz & "1000";
                end case;
                next_state <= WRITE;
               
                            
            when WRITE =>
                o_data <=  target;
                o_en <= '1';
                o_we <= '1';
                o_done <= '1';
                next_state <= DONE;
                
            when DONE =>
                if i_start = '1' then
                    next_state <= DONE;
                else 
                    o_done <= '0';
                    next_state <= RESET;
                end if;
        end case;    
      
end process;                            

end Behavioral;





23:11

-----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 27.03.2020 22:30:49
-- Design Name: 
-- Module Name: Progetto_reti_logiche - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;
use IEEE.NUMERIC_STD.ALL;

entity Progetto_reti_logiche is
    Port ( 
        i_clk     : in std_logic;
        i_start   : in std_logic;
        i_rst     : in std_logic;
        i_data    : in std_logic_vector(7 downto 0);
        o_address : out std_logic_vector(15 downto 0);
        o_done    : out std_logic;
        o_en      : out std_logic;
        o_we      : out std_logic;
        o_data    : out std_logic_vector(7 downto 0)
    );
end Progetto_reti_logiche;

architecture Behavioral of Progetto_reti_logiche is
    type state_type is (RESET, START, WAIT_RAM, SAVE_ADDR, GET_WZ, SAVE_WZ, CHECK, WRITE, ENCODE, DONE);
    
    signal next_state, curr_state: state_type;
    signal counter : std_logic_vector(2 downto 0) := "000"; 
    signal no_wz : std_logic := '0'; 
begin 
    
--    state_reg: process(i_clk, i_rst)
--    begin
--        if i_rst = '1' then 
--            curr_state <= RESET;
--        elsif i_clk'event and i_clk='1' then 
--            curr_state <= next_state;
--       end if;
--   end process;
   
   WZ_analysis: process(curr_state, i_start, i_data, i_rst, i_clk) 
   variable target, curr_Wz : std_logic_vector(7 downto 0) := "00000000"; 
   variable last_Wz : std_logic_vector(2 downto 0);
   variable targetAcquired, no_Wz : std_logic := '0';
   variable check_Wz : signed(7 downto 0);
   begin 
        if i_rst = '1' then 
               curr_state <= RESET;
        
        elsif i_clk'event and i_clk='1' then 
--               curr_state <= next_state;
           
        
        case curr_state is
            when RESET => 
                o_en <= '0';
                o_we <= '0';
                o_address <= "0000000000000000";
                o_done <= '0';
                o_en <= '0';
                o_we <= '0';
                o_data <= "00000000";
                if i_start = '1' then 
                    next_state <= START;
                else   
                    next_state <= RESET;
                end if;
            
            when START =>
                o_address <= x"0008";
                o_en <= '1';
                o_we <= '0';
                next_state <= WAIT_RAM;
                
            when WAIT_RAM => 
                if targetAcquired = '0' then 
                    targetAcquired := '1';
                    next_state <= SAVE_ADDR;
                else 
                    next_state <= SAVE_WZ;
                end if;
                    
            when SAVE_ADDR =>
                target := i_data;
                o_en <= '0';
                next_state <= GET_WZ;
                
            when GET_WZ =>
                case counter is
                    when "000" => 
                        o_address <= x"0000";
                        counter <= "001";
                    when "001" => 
                        o_address <= x"0001";
                        counter <= "010";
                    
                    when "010" => 
                        o_address <= x"0002";
                        counter <= "011";
                    
                    when "011" => 
                        o_address <= x"0003";
                        counter <= "100";
                    
                    when "100" => 
                        o_address <= x"0004";
                        counter <= "101";
                        
                    when "101" => 
                        o_address <= x"0005";
                        counter <= "110";
                    
                    when "110" => 
                        o_address <= x"0006";
                        counter <= "111";
                    
                    when "111" => 
                        o_address <= x"0007";
                        counter <= "000";
                        no_Wz := '1';
                end case;
                o_en <= '1';
                o_we <= '0';  -- In caso da togliere 
                next_state <= WAIT_RAM;      
                
            when SAVE_WZ =>
                curr_Wz := i_data;
                o_en <= '0';  
                next_state <= CHECK;  
                   
            when CHECK =>
                check_Wz := SIGNED(target) - SIGNED(curr_Wz);
                case check_Wz is
                    when "00000000" => next_state <= ENCODE;
                    when "00000001" => next_state <= ENCODE;
                    when "00000010" => next_state <= ENCODE;
                    when "00000011" => next_state <= ENCODE;
                    when others => 
                        if no_Wz = '1' then
                            next_state <= WRITE;  
                        else
                            next_state <= GET_WZ; 
                        end if;
                    end case; 
            
            when ENCODE =>
                last_Wz := std_logic_vector(unsigned(counter) - "001");
                case check_Wz is
                    when "00000000" => target := '1' & last_Wz & "0001";
                    when "00000001" => target := '1' & last_Wz & "0010";
                    when "00000010" => target := '1' & last_Wz & "0100";
                    when others     => target := '1' & last_Wz & "1000";
                end case;
                next_state <= WRITE;
               
                            
            when WRITE =>
                o_data <=  target;
                o_address <= x"0009";
                o_en <= '1';
                o_we <= '1';
                o_done <= '1';
                next_state <= DONE;
                
            when DONE =>
                if i_start = '1' then
                    next_state <= DONE;
                else 
                    o_done <= '0';
                    next_state <= RESET;
                end if;
        end case;    
        curr_state <= next_state;
      end if;
end process;                            

end Behavioral;